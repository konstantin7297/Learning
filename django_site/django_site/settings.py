"""
Django settings for django_site project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging.config
import os
from pathlib import Path

import sentry_sdk  # noqa
from django.utils.translation import gettext_lazy  # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # Корень проекта.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-4t&u=t(w!=kpl#su!862v22=fwi%0+x^6*-zdc_o=9uqt!v62!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "1") == "1"  # При False требует указать ALLOWED_HOSTS, например '127.0.0.1'

ALLOWED_HOSTS = ["0.0.0.0", "127.0.0.1"] + os.getenv("ALLOWED_HOSTS", "").split(",")  # Адреса по которым будет обращение к приложению. Пример: 46.19.67.97 | django_site.com # noqa

INSTALLED_APPS = [  # Список подключенных приложений.
    'django.contrib.admin',  # Подключает админ-панель к проекту.
    'django.contrib.auth',  # Подключает функции аутентификации к проекту.
    'django.contrib.contenttypes',
    'django.contrib.sessions',  # Подключает сессии пользователей к проекту.
    'django.contrib.messages',
    'django.contrib.sitemaps',  # Подключает карту сайта. что-бы поисковики легче находили нужные страницы. # noqa
    'myapp.apps.MyappConfig',  # Подключает мое собственное приложение. Указывается путь от корня.
]

MIDDLEWARE = [  # Это список обработчиков запросов. При получении запроса он проходит по всем middleware сверху вниз и обрабатывается дополнительно.
    'django.middleware.security.SecurityMiddleware',  # Выполняет разные проверки безопасности: все HTTP -> HTTPS если включено, проверка логинов паролей и т.д....
    'django.contrib.sessions.middleware.SessionMiddleware',  # Управляет сессиями пользователей. Он позволяет Django хранить данные сессии и делает их доступными для представлений и шаблонов.
    'django.middleware.common.CommonMiddleware',  # Добавляет '/' к url запросам, если его нет, позволяет добавить некоторые user_agent в блок-лист и т.д.
    'django.middleware.csrf.CsrfViewMiddleware',  # Позволяет сделать проверку на наличие CSRF токена и легко его добавить.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Добавляет вход для пользователя как в админку, так и другие места. # noqa
    'django.contrib.messages.middleware.MessageMiddleware',  # Позволяет хранить и отображать сообщения для пользователей, такие как уведомления о результатах операций или ошибки.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Добавляет заголовок X-Frame-Options к ответам, чтобы предотвратить загрузку страницы в фрейм или iframe с другого сайта.
    'myapp.middlewares.set_useragent_on_request_middleware',  # Пример подключения нового middleware из файла: 'middlewares.py'.
    'myapp.middlewares.CountRequestsMiddleware',  # Middleware, который считает количество запросов и ответов сервера.
]  # После обработки запроса при возвращении ответа, ответ проходит по всем этим обработчикам в обратном порядке снизу вверх и возвращается клиенту.

ROOT_URLCONF = 'django_site.urls'  # Главный файл с путями приложения.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_site.wsgi.application'  # Путь до WSGI приложения.

# Database. Фикс types с Django ORM: 'pip install django-stubs'.
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASE_DIR = BASE_DIR / "database"  # В этой папке будет храниться БД. Настройка для Docker-контейнера, что-бы хранить БД вне контейнера.
DATABASE_DIR.mkdir(exist_ok=True)  # Создание папки, если ее еще нет.
DATABASES = {  # Тут описаны используемые Базы Данных в приложении.
    'default': {  # БД можно менять по необходимости. Сейчас используется SQLite3
        'ENGINE': 'django.db.backends.sqlite3',  # Движок для работы с БД.
        'NAME': DATABASE_DIR / 'db.sqlite3',  # Место хранения БД. BASE_DIR -> DATABASE_DIR для хранения бд в отдельной папке.
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# https://docs.djangoproject.com/en/4.0/topics/i18n/
TIME_ZONE = 'UTC'  # Часовой пояс приложения.
USE_TZ = True

# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#####################################################################################################################################################################################################################
#####################################################################################################################################################################################################################
#####################################################################################################################################################################################################################
# https://docs.djangoproject.com/en/4.0/howto/static-files/
# Настройка: Media. Для возможности загружать и обрабатывать файлы. Установка: "pip install Pillow".
INSTALLED_APPS.append('django.contrib.staticfiles')  # Подключает стилизацию для админки: HTML, CSS, JS.
STATIC_URL = 'static/'  # Папка для хранения статических файлов.
MEDIA_URL = '/media/'  # Путь для получения media-файлов в браузере.
MEDIA_ROOT = BASE_DIR / 'uploads'  # Путь для хранения загруженных media-файлов. Корень проекта + /a_uploads/
DEFAULT_FILE_STORAGE = ''  # Можно указать класс, который будет заниматься работой с файлами. Нужно, когда файлы хранятся в спец. местах. Нужен редко.

# Настройка: Login. Для аутентификации пользователя.
LOGIN_URL = '/admin/'  # Ссылка, куда перенаправлять пользователя для аутентификации. reverse_lazy("", args=(str("myauth:sign-in"),))
LOGIN_REDIRECT_URL = '/admin/'  # Куда перенаправить пользователя после успешной аутентификации. reverse_lazy("", args=(str("shop:home"),))
LOGOUT_REDIRECT_URL = '/admin/'  # Куда перенаправить пользователя после выхода из аутентификации. reverse_lazy("", args=(str("myauth:sign-in"),))

# Настройка: Cache. Для кэширования приложения.
MIDDLEWARE.insert(0, 'django.middleware.cache.UpdateCacheMiddleware')  # Занимается получением и сохранением кэша. Обязательно должен быть первым. Еще нужен нижний.
MIDDLEWARE.insert(-1, 'django.middleware.cache.FetchFromCacheMiddleware')  # Занимается чтением кэша. Обязательно должен быть внизу. Еще нужен верхний.
CACHE_MIDDLEWARE_SECONDS = 300  # Время в секундах для хранения кэша. Middlewares нужны только для глобального кэширования, для кэширования отдельных частей они не нужны.
CACHES = {  # Настройка кэширования для приложения.
    "default": {
        # "BACKEND": "django.core.cache.backends.dummy.DummyCache",  # Переводит кэширование в спящий режим. Т.е. функции будут все работать, но кэш сохраняться не будет.
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",  # Как хранится кэша. Так же подходит redis, БД... # noqa
        "LOCATION": "/var/tmp/django_cache",  # Место хранения кэша.
    }
}

# Настройка: Logging. Для логирования приложения.
LOGGING = {  # Настройка логгеров. # noqa
    "version": 1,  # Версия логирования.
    "disable_existing_loggers": False,  # Что-бы не отключать уже существующие логгеры. # noqa
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue"}},  # Выводит логи, если приложение запущено в DEBUG=True режиме.
    "formatters": {"verbose": {"format": "%(asctime)s | %(levelname)s | %(name)s | %(message)s"}},  # %s - выводит переменную, которая внутри. # noqa
    "handlers": {
        "console": {"class": "logging.StreamHandler"},  # Обычный обработчик для вывода в консоль.
        "debug-log": {"level": "DEBUG", "filters": ["require_debug_true"], "class": "logging.StreamHandler"},  # Обработчик для DEBUG режима в консоль.
        "log-file": {"class": "logging.handlers.RotatingFileHandler", "filename": BASE_DIR / "log.txt", "maxBytes": 8000, "backupCount": 3, "formatter": "verbose"}  # Обработчик для ротации файлов.
    },
    "root": {"handlers": ["console", "log-file"], "level": "INFO"},  # Настройки корневого логгера. # noqa
    "loggers": {"django.db.backends": {"level": "DEBUG", "handlers": ["debug-log"]}},  # Сам логгер. Логгер по-умолчанию для БД приложения. # noqa
}
LOGLEVEL = os.getenv("LOGLEVEL", "INFO").upper()  # Уровень логирования из ENV файла и параметр по-умолчанию. Для Docker-контейнера.
logging.config.dictConfig(LOGGING)  # Загружаем настройки логирования для Docker-контейнера.

# Настройка: Internationalization. Для локализации приложения - перевод на другие языки. Установка: "sudo apt-get install gettext".
MIDDLEWARE.append('django.middleware.locale.LocaleMiddleware')  # Позволяет сделать в проекте несколько локализаций на разных языках.
LANGUAGE_CODE = 'en-us'  # Язык всего приложения по-умолчанию. Если не будет найден нужный язык, то будет использован именно этот.
USE_I18N = True  # Internationalization - Подготовка приложения к переводу: gettext и все такое...
USE_L10N = True  # Localisation - Настройка поддержки разных языков для приложения.
LOCALE_PATHS = [BASE_DIR / "locale/"]  # Место, где будут храниться файлы локализации. # Корень проекта + /locale/
LANGUAGES = [  # Список языков, которые приложение будет поддерживать. То есть языки, на которые нужно будет перевести приложение.
    ("en", gettext_lazy("English")),  # gettext - функция локализации. Сделает перевод значения при запуске проекта. Подходит для статических данных. # noqa
    ("ru", gettext_lazy("Russian")),  # gettext_lazy - сделает перевод значения при вызове в запущенном проекте. Подходит для динамических данных. # noqa
]

# Настройка: REST Framework. Для создания хорошего API приложения. Установка: "pip install djangorestframework".
INSTALLED_APPS.append('rest_framework')  # Подключает REST Framework для создания API.
REST_FRAMEWORK = {  # Конфигурация REST Framework'а. Он нужен для составления хорошего API приложения. # noqa
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",  # Нужно, что бы API мог работать со списком объектов.
    "PAGE_SIZE": 10,  # Оптимизация отправки. Данные будут отправляться по 10 элементов в списке.
    "DEFAULT_AUTHENTICATION_CLASSES": [  # Установка типа авторизации и полномочий глобально. Можно указать отдельно на моделях и т.д.
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

# Настройка: django-filters. Для установки фильтров на API приложения. Установка: "pip install django-filters".
INSTALLED_APPS.append('django_filters')  # Подключает фильтрацию для REST Framework.
REST_FRAMEWORK["DEFAULT_FILTER_BACKENDS"] = ["django_filters.rest_framework.DjangoFilterBackend"]  # Добавляет возможности фильтрации данных API.

# Настройка: Документация. Для документирования приложения. Установка: "pip install docutils flake8 flake8-docstrings".
INSTALLED_APPS.append('django.contrib.admindocs')  # Подключает документацию к проекту.
MIDDLEWARE.append('django.contrib.admindocs.middleware.XViewMiddleware')  # Подключает документацию к проекту.

# Настройка: drf-spectacular. Для доработки документации к API приложения. Установка: "pip install drf-spectacular".
INSTALLED_APPS.append('drf_spectacular')  # Подключает другую документацию.
REST_FRAMEWORK["DEFAULT_SCHEMA_CLASS"] = "drf_spectacular.openapi.AutoSchema"  # Меняет базовый класс для парсинга схем на класс из "drf-spectacular". # noqa
SPECTACULAR_SETTINGS = {  # Дополнительно требует подключить адреса в корневом файле: 'urls.py'.
    "TITLE": "My docs",  # Заголовок для страницы документации.
    "DESCRIPTION": "My description",  # Описание для страницы документации.
    "VERSION": "1.0.0",  # Версия приложения или документации.
    "SERVE_INCLUDE_SCHEMA": False,  # Убирает информацию о самой документации на странице, оставляя только спарсенные данные по документации. # noqa
}

# Настройка: django-debug-toolbar. Для мониторинга и профилирования приложения. Установка: "pip install django-debug-toolbar".
INSTALLED_APPS.append('django.contrib.staticfiles')  # Подключает стилизацию для админки: HTML, CSS, JS.
INSTALLED_APPS.append('debug_toolbar')  # Подключает дополнение для профилирования приложения.
MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')  # Подключает обработчик профилирования.
INTERNAL_IPS = ["127.0.0.1"]  # Адреса, по которым можно получать информацию о приложении.
if DEBUG:  # Для доступа к панели 'django-debug-toolbar' из docker-контейнера.
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())  # Получаем данные о сети docker-контейнера.
    INTERNAL_IPS.append("10.0.2.2")  # IP docker по-умолчанию.
    INTERNAL_IPS.extend([ip[: ip.rfind(".")] + ".1" for ip in ips])  # Добавляем оставшиеся ip адреса docker-контейнера.

# Настройка: Sentry. Для мониторинга и профилирования приложения. Установка: "pip install --upgrade 'sentry-sdk[django]'".
sentry_sdk.init(
    dsn="https://88ae3300d0483837c7021f0a4edd73d5@o4506766790230016.ingest.us.sentry.io/4507589105614848",
    traces_sample_rate=1.0,
    profiles_sample_rate=1.0,
)
