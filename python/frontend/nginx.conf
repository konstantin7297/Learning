user  nginx;  Запуск сервера от имени пользователя, а не от root'а по-умолчанию. Можно изменить.
worker_processes  auto;  Сколько ядер может использовать сервер.

error_log  /var/log/nginx/error.log notice;  Место куда нужно писать логи, notice - уровень логирования nginx.
pid        /var/run/nginx.pid;  Место куда нужно записать pid процесса, что бы иметь возможность его закрыть и т.д.

events {
    worker_connections  1024;  Устанавливается макс. кол-во одновременных соединений.
};  Секция, в которой доп. параметры для всего web-сервера.


http {
    gzip on;  Включает сжатие для отдаваемого контента, используется для корректировки времени ответа сервера.
    gzip_types text/plain text/html text/css text/javascript application/xml application/json;  Типы файлов для сжатия.
    gzip_min_length 256;  Минимальный размер ответа для сжатия.
    gzip_comp_level 6;  Уровень сжатия.
    gzip_buffers 16 8k;  Буферы для сжатия.
    gzip_http_version 1.1;  Версия HTTP для сжатия.
    gzip_proxied any;  Параметры для прокси-запросов.
    gzip_vary on;  Для правильной работы с кэшем.

    include   /etc/nginx/mime.types;  Включает различные типы файлов. Например: 'application/json'.
    default_type  application/octet-stream;  Тип контента по-умолчанию. Так NGINX может получать файлы как byte код.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request"'
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  Нужно для логирования. Все три строки являются одним значением для этого параметра. Это формат логирования.

    access_log  /var/log/nginx/access.log  main;  Нужен так же для логирования. Это путь до файла логирования.

    sendfile           on;  Включает оптимизацию для более быстрой отдачи static контента (отправляет файлы прямо из ОС).
    keepalive_timeout  65;  Указывает, сколько еще держать соединение открытым после завершения задачи (сколько ждать другую задачу до закрытия session).

    upstream api_server {
        least_conn;  Алгоритм распределения нагрузки (можно не указывать). least_conn - алгоритм по количеству соединений. ip_hash - запросы одного IP попадут на 1 сервер.
        server server:5000 max_fails=3 fail_timeout=10s weight=1;  server:5000 - адрес proxy сервера для распределения нагрузки секции. Подробнее в секции server.
        server server:5001 max_fails=3 fail_timeout=10s weight=1;  server:5001 - адрес proxy сервера для распределения нагрузки секции. Подробнее в секции server.
    };  Дублируются сервера для распределения нагрузки.

    server {
        listen       80;  Порт для ipv4, на него будут падать запросы с ipv4.
        listen       [::]:80;  Порт для ipv6, на него будут падать запросы с ipv6.
        root   /app/static;  Указывает корень директории, откуда нужно брать файлы.
        server_name  example.com  www.example.com;  Указывает название данного сервера (сайта).

        location /api/ {
            proxy_pass http://api_server;  Адрес секции upstream, на которую будет идти весь трафик сервера для распределения нагрузки.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            index  index.html index.htm;  При входе на эту локацию отдаст файл index.html или .htm из корневой директории (/usr/share/nginx/html;).
            include uwsgi_params;  Перенаправить запрос на uwsgi_params.
            uwsgi_pass  unix:/run/uwsgi.sock;  Перенаправить запрос на сокет UWSGI.


            try_files $uri $uri/ /index.html;  Проверяет на существование url, если файлов нет, то перенаправляет на index.html.
            autoindex on;  Позволяет индексировать все содержимое root'а (т.е. при запросе example.com/ может отдать любой файл из приложения, например static папку).
        };  Описываются пути сервера и какой файл по этому пути нужно вернуть. Все запросы на '/' должны вернуть то что внутри(autoindex, index...).
    };  Настройки для конкретного сайта, дефолт находится: '/etc/nginx/conf.d/default.conf'.
};  Секция, описывает настройки для всех сайтов (для всего контейнера и nginx).

daemon off;  Выключает стандартный запуск nginx, нужно для динамических сайтов, где nginx запускается вручную через например: 'supervisord.ini'.
