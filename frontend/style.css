/* Синтаксис */
h1 {}  /* Настройка параметров по тегу. */
#id {}  /* Настройка параметров по id */
.cls {}  /* Настройка параметров по классу */

/* Псевдо-классы */
:root {}  /* Глобальный селектор, его параметры применяются ко всем элементам. */
.cls:first-child {}  /* Первый найденный селектор с указанным именем в одной группе. */
.cls:last-child {}  /* Последний найденный селектор с указанным именем в одной группе. */
.cls:not(:first-child) {}  /* Все, кроме первого селектора с указанным именем в одной группе. */
.cls:nth-child(3n + 4) {}  /* Каждый 3 селектор с указанным именем, начиная с 4. -n будет идти в обратном порядке. */
.cls:nth-last-child(2) {}  /* Каждый 2 селектор с указанным именем, но отсчет будет с конца. */
.cls:focus {}  /* При нажатии, объект должен уметь нажиматься (ссылка, кнопка...). */
.cls:hover {}  /* При наведении мыши. На телефоне нужно фокусироваться на объекте. */
.cls:active {}  /* При нажатии на объект. Между 'Нажать ЛКМ' и 'Отпустить ЛКМ'. */
.cls:checked {}  /* При нажатии на объект. Но при нажатии на другой такой же - первый становится обычным. */
.cls:valid {}  /* Если прошла проверка валидации. */
.cls:invalid {}  /* Если НЕ прошла проверка валидации. */
.cls:visited {}  /* Если объект уже был нажат хоть раз. */

/* Псевдо-элементы */
.cls::selection {}  /* Если объект выделен. */
.cls::first-line {}  /* Первая строка текста. */
.cls::first-letter {}  /* Первая буква текста. */
.cls::placeholder {}  /* Фоновый текст в строке ввода. */
.cls::before {}  /* Настройка перед элементом. {content: ''} - обязательный параметр, хоть и пустой. */
.cls::after {}  /* Настройка после элемента. {content: ''} - обязательный параметр, хоть и пустой. */

/* Комбинированные селекторы */
h1, h2 {}  /* Перечисление селекторов, так параметры применяться ко всем перечисленным селекторам. */
h1 h2 {}  /* Вложенный селектор, параметры применяются ко всем h2, которые внутри h1. */
.cls.cls2 {}  /* Комбинация классов, параметры применяются к элементам сразу с двумя указанными классами. */
.cls > .cls2 {}  /* Применяется только к дочерним указанным классам. cls2, которые внутри cls. */
.cls .cls2 ~ .cls3 {}  /* Применяется к дочерним элементам, с которыми сразу есть и указанный класс. */
.cls .cls2 + .cls3 {}  /* Применяется только к следующему элементу с которым сразу есть указанный (т.е. .cls3, идущий сразу за .cls2). */
.cls[href] {}  /* Применяется к элементам по аттрибутам, если есть href - будет работать, учитывает значения аттрибутов (href='url'). */
.cls[href*="login"] {}  /* Применяется к тем элементам, в которых есть указанная строка. Символ: '*'. */
.cls[href^="login"] {}  /* Применяется к тем элементам, которые начинаются с указанной строки. Символ: '^'. */
.cls[href$="login"] {}  /* Применяется к тем элементам, которые заканчиваются с указанной строкой. Символ: '$'. */

h1 {  /* Основные типы данных */
    --q: 0;  /* Так создается своя переменная со своим значением. Использовать можно так: margin: var(--my_val); */
    --w: 1%;  /* Проценты. */
    --e: 1px;  /* Пиксели. */
    --r: 1em;  /* От размера родительского элемента. */
    --t: 1rem;  /* От размера стандарта браузера. */
    --y: 1vw;  /* Размер от ширины view-порта. */
    --u: 1vh;  /* Размер от высоты view-порта. */
    --i: 1vmin;  /* Размер от минимальной стороны view-порта. */
    --o: 1vmax;  /* Размер от максимальной стороны view-порта. */
    --p: revert;  /* Сбрасывает значение до браузерного дефолта. */
    --a: inherit;  /* Наследует значение свойства от родительского элемента. */
    --s: initial;  /* Устанавливает значение свойства в значение по умолчанию. Даже переписывает значение браузера на свой дефолт из css. */
    --d: unset;  /* Работает от типа свойства, если оно наследуемое как color, то установит color initial, display block сбросит до inline по умолчанию. */

    /* Свойства позиционирования */
    outline: 1px solid dimgrey;  /* Делает рамку для объекта. В отличии от border не учитывается в размерах рамки. Вспомогательное средство, удаляется после работы. */
    position: relative;  /* Правила размещения по координатам в своем пространстве. Например можно сделать объект по центру или справа вверху. */
    top: 0;  /* Делает отступ сверху и меняет позицию при измененной position. Работает с position. */
    right: 0;  /* Делает отступ справа и меняет позицию при измененной position. Работает с position. */
    bottom: 0;  /* Делает отступ снизу и меняет позицию при измененной position. Работает с position. */
    left: 0;  /* Делает отступ слева и меняет позицию при измененной position. Работает с position. */

    /* Блочная модель */
    display: inline;  /* Превращает объект в конкретный тип. Может сделать его параграфом, строкой, блоком и т.д. */
    flex-flow: row wrap;  /* Параметр размещения дочерних элементов внутри объекта. */
    flex-basis: 100px;  /* То же, что и width, но приоритетнее. */
    flex-grow: 1;  /* Рост при избытке контента. Указывает, на сколько элемент будет расти в ширине. 0 - запрещает расширение вообще. */
    flex-shrink: 1;  /* Сжатие при недостатке контента. То же, что и flex-grow, но наоборот сжимает элементы. 0 - запрещает сжатие вообще. */
    order: 2;  /* Например .red {order: -2;} переносит объект с классом ред на 2 ячейки назад. Переносит указанный объект на указанную ячейку. */
    align-content: center;  /* Отвечает за расстояние между рядами. */
    align-items: flex-start;  /* Отвечает за выравнивание размеров блоков по второстепенной оси. Типа верх маленького объекта вырастет до уровня верха большого. */
    align-self: flex-end;  /* Отвечает за выравнивание, но уже для дочерних объектов. */
    justify-content: flex-start;  /* Отвечает за выравнивание размеров блоков по основной оси. Почти как align-items. Еще отвечает за отступы. */
    columns: 3;  /* Деление дочерних элементов. Распределяет внутренние элементы по трем столбикам. Применяется, когда нужно разбить элементы на равные части. */
    break-inside: avoid-column;  /* Описывает поведение колонки при переносах. */
    row-gap: 20px;  /* Грамотный отступ между элементами в ряду. Работает с display: flex. */
    column-gap: 20px;  /* Грамотный отступ между элементами в колонке. Работает с display: flex. */
    gap: 20px;  /* Универсальная версия команды из row-gap и column-gap вместе. */
    margin: 10px 20px 30px 40px;  /* Внешние отступы элемента. top | right | bottom | left */
    padding: 10px 20px 30px 40px;  /* Внутренние отступы элемента. top | right | bottom | left */
    border: 1px solid dimgrey;  /* Граница или рамка объекта. Линия между внешним и внутренним отступом. Почти как outline, но остается после работы. */
    border-radius: 20px;  /* Закругляет углы объекта. */
    border-collapse: collapse;  /* Описывает поведение границ ячеек при пересечении. */
    height: 100px;  /* Высота объекта. Есть так же min/max вариации. */
    width: 100px;  /* Ширина объекта. Есть так же min/max вариации. */
    box-sizing: border-box;  /* Говорит, как управлять border и padding значениями. */
    z-index: 0;  /* Настраивает Z-пространство расположения элементов (какой будет поверх другого). */
    float: left;  /* Параметры: top | right | bottom | left. Позволяет обтекать элемент с указанной стороны. Например текст может писаться справа от картинки. */

    /* Типографика */
    font-family: Verdana, sans-serif;  /* Параметры: шрифты через запятую. Шрифт текста, если первый не будет работать, будет второй. sans-serif - дефолт. */
    font-size: 30px;  /* Размер шрифта текстов. */
    font-style: italic;  /* Модификация текста, например делает текст наклонным или жирным. */
    font-weight: bold;  /* Объем шрифта текста. Например жирный текст. */
    text-align: right;  /* По какой стороне выравнивается текст. */
    text-shadow: 5px 3px 8px dimgrey;  /* Параметры наложения тени на текст. */
    text-transform: capitalize;  /* Трансформация текста. Например сделать первые буквы заглавными. */
    text-indent: 1px;  /* Начало текста будет начинаться с отступом в 1px. Начальный отступ текста. */
    text-decoration: none;  /* Декорация текста. Например подчеркнутый текст. Можно указывать через пробел параметры. */
    letter-spacing: 1px;  /* Грубо говоря - между буквенный интервал. Отступ между буквами в тексте. */
    line-height: 30px;  /* Грубо говоря - междустрочный интервал. Отступ между строками текста. */
    white-space: nowrap;  /* Поведение текста при переносах текста на новую строку через пробелы. */
    word-spacing: 10px;  /* Грубо говоря - отступ между словами. Размер пробела между словами. */
    color: dimgrey;  /* Указывает цвет объекта. */
    fill: dimgrey;  /* Отвечает за цвет куска картинки SVG. Для SVG картинок, background картинки, для работы нужно удалить данный параметр в path самой картинки. */
    stroke: dimgrey;  /* Отвечает за цвет куска картинки SVG. Для SVG картинок, обводка элементов, для работы нужно удалить данный параметр в path самой картинки. */
    all: unset;  /* Не часто нужная настройка. Сбросит все до inherit (дефолтные настройки). */

    /* Оформление */
    background-color: dimgrey;  /* Цвет фона блока. */
    background-image: url(".");  /* Нужно указать ссылку на картинку. Загружает картинку на задний фон по ссылке. linear-gradient(45deg, #fff 30%, red 30% 70%, #000 30%) */
    background-position: top left;  /* Настройка расположения картинки. Горизонталь и Вертикаль. */
    background-repeat: no-repeat;  /* Отвечает за заполнение пространства картинкой, если ее размер меньше блока (то есть по всему блоку будет много одинаковых картинок). */
    background-size: cover;  /* Отвечает за размер фона. Например растянется ли картинка на весь блок. */
    opacity: 0.5;  /* Будет ли объект видимым и просвечиваться или нет. Уровень прозрачности объекта. */
    overflow: auto;  /* Видимость элементов внутри контейнера, если они выходят за его границы. */
    object-fit: cover;  /* Параметры масштабирования для заменяемых объектов: картинок или видео. Будет ли расширяться на весь блок и все такое. */
    list-style: none;  /* Оформление визуальной части списка элементов. */
    cursor: pointer;  /* Какой курсор используется при наведении на объект. Стрелочка, крестик... */
    box-shadow: 5px 3px 8px dimgrey;  /* Параметры наложения тени на блок. inset в начале заставляет тень идти внутрь объекта. */
    visibility: hidden;  /* Параметры отображения и взаимодействия объекта. Например можно полностью скрыть его, что-бы нельзя было тыкнуть или увидеть. */
    user-select: none;  /* Параметры при выделении объекта пользователем. */
    appearance: none;  /* Параметры стилей объекта. Например сбрасывает стиль галочки чекбокса. */
    filter: blur(3px);  /* Накладывает эффекты на объект. Например: замылить, инвертирование, черно-белый стиль... */

    /* Анимации */
    transform: translate(10px, 20px);  /* Анимирование объекта. Например изменение масштаба. */
    transform-origin: top right;  /* Указывает позицию, относительно которой нужно применять transform параметры.. */
    transition-property: color, background-color;  /* Анимирование объекта. Визуальное изменение: цвет, расположение и т.д. */
    animation-name: twist;  /* Анимирование объекта. Еще одно. */
    animation-play-state: paused;  /* Режим активации анимации. При наведении мыши или как то еще. */
    animation-delay: 3s;  /* Анимация начнется спустя 3 секунды простоя. Время простоя анимации. */
    animation-fill-mode: forwards;  /* Состояние элемента после анимации. */
}

/* Адаптивная верстка с формулами. */
.adaptive {  /* Адаптивность верстки, а точнее грамотные формулы. */
    --gap: 30px;  /* Отступ между элементами. */
    --offsets: 2;  /* Количество отступов между элементами. */
    width: calc((100% - (var(--gap) * var(--offsets))) / (var(--offsets) + 1));  /* формула вычета ширины элемента. */
     /* 100% - Максимальная доступная ширина в указанном месте. */
     /* var(--gap) * var(--offsets) - Суммарное значение отступов в пикселях. */
     /* var(--offsets) + 1 - Количество карточек (всегда больше, чем количество отступов на 1). */
     /* Итог: (полная ширина блока - (суммарное значение отступов)) / количество карточек в блоке = доступная ширина для каждого блока. */
}

/* Стилизованная кнопка галочки для input. */
.label {  /* label элемент | Структура custom кнопки: label - первая строка. */
    user-select: none;  /* Сбрасывает стили по умолчанию, выделение объекта пользователем. */
    cursor: pointer;  /* Показывает пользователю при наведении, что объект кликабельный (делает стрелку мыши пальцем для тычки). */
}

.input {  /* Кликабельный элемент, кнопка | Структура custom кнопки: input - вторая строка. */
    position: absolute;  /* Выводит кубик для галочки в иное Z пространство. */
    appearance: none;  /* Убирает дефолтные стили кубика для галочки (весь кубик). */
}

.span {  /* Текст для кнопки | Структура custom кнопки: span - третья строка. */
    position: relative;  /* Меняет позицию текста на относительную и перемещает текст на место кубика для галочки. */
    padding-left: 20px;  /* Делает padding на месте нового кубика, что бы не сливаться с ним. */
}

.span::before {  /* Добавляет перед текстом элемент (в данном случае квадрат из border 15*15). */
    content: "";  /* Требуемое значение для работы. Пустышка для использования: '::before'. */
    position: absolute;  /* Располагает новый кастомный кубик. */
    left: 0;  /* Обнуляет отступ нового кубика слева. */
    top: 50%;  /* Делает отступ нового кубика сверху. */
    width: 15px;  /* Ширина нового кубика. */
    height: 15px;  /* Высота нового кубика. */
    border: 1px solid dimgrey;  /* Остальные параметры нового кубика. */
    transform: translateY(-50%);  /* Выравнивает расположение нового кубика относительно top отступа. */
}

.span::after {  /* Добавляет внутренний для кубика элемент или элемент после текста (в данном случае закрашенный кубик). */
    content: "";  /* Требуемое значение для работы. Пустышка для использования: '::after'. */
    position: absolute;  /* Располагает новый кастомный закрашенный кубик. */
    left: 0;  /* Обнуляет отступ нового закрашенного кубика слева. */
    top: 50%;  /* Делает отступ нового закрашенного кубика сверху. */
    width: 15px;  /* Ширина нового закрашенного кубика. */
    height: 15px;  /* Высота нового закрашенного кубика. */
    border: 1px solid dimgrey;  /* Остальные параметры нового закрашенного кубика. */
    background-color: dimgrey;  /* Закрашивает самый новый кубик. */
    transform: translateY(-50%);  /* Выравнивает расположение нового закрашенного кубика относительно top отступа. */
    opacity: 0;  /* Делает самый новый закрашенный кубик прозрачным. */
    transition: opacity 0.3s;  /* Делает анимацию перехода в прозрачный режим и обратно длительностью 0.3 сек. */
}

.input:checked + .span::after { /* Проверяет input на взаимодействие и при взаимодействии применяет параметры к указанному после "+" месту. */
    opacity: 1; /* Обнуляет прозрачность закрашенного кубика. */
}

/* Вариант анимации без остановки, она работает в зависимости от внутренних настроек. */
@keyframes twist {
    /* Желательно юзать transform для оптимизации, т.к. left - сдвигает весь сайт, а transform - независимая часть. */
    0% {  /* Стартовый ключевой кадр - обязательный этап анимации. Тут должны расписываться все параметры анимации. 0% = from.  */
      transform: none;  /* Позиция объекта на 0% - слева с краю и крутится на 0% от 360 градусов. */
    }
    40% {  /* Вторичный кадр - необязательный этап, тут можно несколько подкорректировать параметры анимации или их темп. */
      transform: translateX(200px) rotate(144deg);  /* Позиция объекта на 40% - на 200px правее относительно прошлой позиции и крутится на 40% от 360 градусов. */
    }
    100% {  /* Конечный ключевой кадр - обязательный этап анимации. Тут должны расписываться все финальные параметры анимации. 100% = to. */
        transform: translateX(500px) rotate(360deg);  /* Позиция объекта на 100% - еще на 300px правее относительно прошлой позиции и крутится на 100% от 360 градусов. */
    }
}

/* Вариант импорта шрифтов, делается всегда в начале. */
@font-face {
    font-family: "OpenSans";  /* Назначаемое имя шрифта. */
    src: local("OpenSans-regular"),  /* Ищет локально на ПК пользователя указанный шрифт. */
        url("./MyFont.woff2") format("woff2"),  /* Загружает указанный шрифт в указанном формате. */
        url("./MyFont.woff") format("woff");  /* Загружает указанный шрифт, если первый не загрузился. */
    font-weight: 400;  /* Стандартное значение для размера шрифта. */
    font-style: normal;  /* Стиль шрифта, может быть italic - наклонный, bold - жирный и т.д. */
    font-display: swap;  /* Заставляет шрифт применяться при переключении браузера. */
}

/* Применяет конкретные настройки в зависимости от разрешения экрана. */
@media (max-width: 600px) {  /* Требует обязательно в файле html настройку "<meta name="viewport"..." для работы. */
     /* (max-width: 600px) - Медиа запрос для изменения контента в зависимости от разрешения экрана. */
     /* (orientation: portrait) - Медиа запрос для изменения контента в зависимости от расположения экрана. portrait - портретное, то есть вертикальное. */
     /* (prefers-color-scheme: dark) - Медиа запрос для изменения контента в зависимости от используемой темы. dark - темная тема. */

    .item {  /* Имя класса, который будет меняться. */
        color: dimgrey;  /* Значение, которое нужно изменить. */
    }
}

/* Вариант применения параметров к конкретному браузеру. */
@-moz-document url-prefix() {  /* Вариант применения параметров к конкретному браузеру. */
     /* -moz-document - Значит, что параметры будет применены только к браузеру mozilla firefox. */

    .item {  /* Имя класса, который будет меняться. */
        color: dimgrey;  /* Значение, которое нужно изменить. */
    }
}
